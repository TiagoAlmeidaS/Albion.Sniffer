name: Core Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/AlbionOnlineSniffer.Core/**'
      - 'tests/Albion.Sniffer.Core.Tests/**'
      - '.github/workflows/core-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/AlbionOnlineSniffer.Core/**'
      - 'tests/Albion.Sniffer.Core.Tests/**'
      - '.github/workflows/core-tests.yml'
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: Test Core Layer
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore tests/Albion.Sniffer.Core.Tests/Albion.Sniffer.Core.Tests.csproj
      
    - name: Build
      run: dotnet build tests/Albion.Sniffer.Core.Tests/Albion.Sniffer.Core.Tests.csproj --no-restore --configuration Release
      
    - name: Run tests with coverage
      run: |
        dotnet test tests/Albion.Sniffer.Core.Tests/Albion.Sniffer.Core.Tests.csproj \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --logger "trx;LogFileName=test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          /p:CollectCoverage=true \
          /p:CoverletOutput=TestResults/ \
          /p:CoverletOutputFormat=cobertura \
          /p:Include="[AlbionOnlineSniffer.Core]*" \
          /p:Exclude="[*.Tests]*,[*]*.Models.*,[*]*.Enums.*"
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          tests/Albion.Sniffer.Core.Tests/TestResults/*.trx
          tests/Albion.Sniffer.Core.Tests/TestResults/*.xml
          
    - name: Generate coverage report
      if: success()
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.0
        reportgenerator \
          -reports:tests/Albion.Sniffer.Core.Tests/TestResults/coverage.cobertura.xml \
          -targetdir:coverage-report \
          -reporttypes:Html_Dark\;Badges\;TextSummary
          
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: coverage-report
        path: coverage-report/
        
    - name: Display coverage summary
      if: success()
      run: cat coverage-report/Summary.txt
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        files: tests/Albion.Sniffer.Core.Tests/TestResults/coverage.cobertura.xml
        flags: core-tests
        name: core-coverage
        fail_ci_if_error: false
        verbose: true
        
    - name: Comment PR with coverage
      uses: 5monkeys/cobertura-action@v14
      if: github.event_name == 'pull_request' && success()
      with:
        path: tests/Albion.Sniffer.Core.Tests/TestResults/coverage.cobertura.xml
        minimum_coverage: 85
        show_missing: true
        show_line: true
        show_branch: true
        fail_below_threshold: false
        
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: test
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: test-results/
        
    - name: Download coverage report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: coverage-report/
        
    - name: Check coverage threshold
      run: |
        COVERAGE=$(grep -oP 'Line coverage: \K[0-9.]+' coverage-report/Summary.txt || echo "0")
        echo "Current coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 85" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below threshold of 85%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets threshold of 85%"
        fi