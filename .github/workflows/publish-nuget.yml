name: Build and Publish NuGet Package

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'src/AlbionOnlineSniffer.Core/AlbionOnlineSniffer.Core.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Create clean nuget.config for CI/CD
      run: |
        cat > nuget.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <packageSources>
            <clear />
            <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
            <add key="github" value="https://nuget.pkg.github.com/TiagoAlmeidaS/index.json" />
          </packageSources>
          <packageSourceCredentials>
            <github>
              <add key="Username" value="TiagoAlmeidaS" />
              <add key="ClearTextPassword" value="%PAT_TOKEN%" />
            </github>
          </packageSourceCredentials>
        </configuration>
        EOF

    - name: Restore dependencies
      run: dotnet restore AlbionOnlineSniffer.sln

    - name: Build
      run: dotnet build AlbionOnlineSniffer.sln --no-restore --configuration Release

    - name: Test
      run: dotnet test AlbionOnlineSniffer.sln --no-build --configuration Release --verbosity normal

    - name: Pack
      run: dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg

  publish-nuget:
    name: Publish to NuGet.org
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: Publish to NuGet.org
      run: dotnet nuget push "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg" --source 'https://nuget.pkg.github.com/TiagoAlmeidaS/index.json' --api-key ${{ secrets.PAT_TOKEN }} --skip-duplicate

  auto-version:
    name: Auto Version Update
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Get current version
      id: current-version
      run: |
        VERSION=$(grep '<Version>' ${{ env.PROJECT_PATH }} | sed 's/.*<Version>\(.*\)<\/Version>.*/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

    - name: Increment patch version
      id: new-version
      run: |
        CURRENT_VERSION=${{ steps.current-version.outputs.version }}
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update version in project file
      run: |
        sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.new-version.outputs.new-version }}<\/Version>/" ${{ env.PROJECT_PATH }}
        
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ${{ env.PROJECT_PATH }}
        git commit -m "chore: bump version to ${{ steps.new-version.outputs.new-version }} [skip ci]" || exit 0
        git push
